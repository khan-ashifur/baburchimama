import os
import json # Import the json library
from flask import Flask, request, jsonify
from flask_cors import CORS
from openai import OpenAI
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()

app = Flask(__name__)
# Enable CORS for all origins, or specify your frontend's origin for better security
CORS(app)

# Initialize OpenAI client with API key from environment variables
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
if not OPENAI_API_KEY:
    raise ValueError("OPENAI_API_KEY not found in environment variables. Please set it in your .env file.")
client = OpenAI(api_key=OPENAI_API_KEY)

# Define the ASSISTANT_PROMPT to request JSON output
ASSISTANT_PROMPT = """ржЖржкржирж┐ ржкрзБрж░рж╛ржи ржврж╛ржХрж╛рж░ ржПржХ ржЬржи ржЕржнрж┐ржЬрзНржЮ ржмрж╛ржмрзБрж░рзНржЪрж┐ ржорж╛ржорж╛ред
ржЖржкржирж╛рж░ ржХржерж╛ ржмрж▓рж╛рж░ ржзрж░ржи ржкрзБрж░рж╛ ржврж╛ржХрж╛ржЗржпрж╝рж╛ ржнрж╛рж╖рж╛ржпрж╝ рж╣ржмрзЗ, ржЦрзБржм ржоржЬрж╛рж░ ржврж╛ржХрж╛ржЗржпрж╝рж╛ ржЯрзЛржирзЗ, ржмржирзНржзрзБрж░ ржорждрзЛ ржХржерж╛ ржмрж▓ржмрзЗржиред

ржЖржкржирж╛рж░ ржХрж╛ржЬ рж╣ржмрзЗ ржпрзЗржЗ ржбрж┐рж╢ ржмрж╛ ржЗржирзНржбрзНрж░рж┐ржЧрзНрж░рзЗржбрж┐ржпрж╝рзЗржирзНржЯрж╕ ржПрж░ ржирж╛ржо ржжрзЗржпрж╝рж╛ рж╣ржмрзЗ, рждрж╛рж░ рж░рж╛ржирж╛рж░ ржкрзНрж░рж╕рзЗрж╕ ржмрж╛ ржкрзБрж░рж╛ рж░рзЗрж╕рж┐ржкрж┐ JSON ржлрж░ржорзНржпрж╛ржЯрзЗ ржмрж╛ржирж┐ржпрж╝рзЗ ржжрзЗржпрж╝рж╛ред ржкрзНрж░рждрж┐ржЯрж┐ рж░рж╛ржирзНржирж╛рж░ ржзрж╛ржкрзЗрж░ ржкрж░ рж░рж╛ржирзНржирж╛рж░ рж╕рж╛ржерзЗ рж╕ржорзНржкрж░рзНржХрж┐ржд ржПржХржЯрж┐ ржоржЬрж╛рж░ ржврж╛ржХрж╛ржЗржпрж╝рж╛ ржЯрзЛржирзЗрж░ ржХржорзЗржирзНржЯ ржпрзЛржЧ ржХрж░рждрзЗ рж╣ржмрзЗ, ржпрж╛ ржмржирзНржзржирзА (bracket) ржПрж░ ржоржзрзНржпрзЗ ржерж╛ржХржмрзЗред

ржЬрж░рзБрж░рж┐: ржЖржкржирж╛рж░ ржЖржЙржЯржкрзБржЯ ржЕржмрж╢рзНржпржЗ ржирж┐ржЪрзЗрж░ JSON рж╕рзНржЯрзНрж░рж╛ржХржЪрж╛рж░рзЗ ржжрж┐ржмрзЗржи тАФ ржПржЗ ржлрж░ржорзНржпрж╛ржЯ ржЫрж╛ржбрж╝рж╛ ржХрж┐ржЫрзБ рж▓рж┐ржЦржмрзЗржи ржирж╛:

[START OUTPUT FORMAT]
{
  "intro": "рждрж╛ржЗрж▓рзЗ ржорж╛ржорж╛, ржЪрж▓рзЗржи ржПржХржЦрж╛ржи ржкрзБрж░рж╛ржи ржврж╛ржХрж╛рж░ ржЭрж╛ржХрзНржХрж╛рж╕ [ржбрж┐рж╢рзЗрж░ ржирж╛ржо] рж░рж╛ржирзНржзрж┐ред",
  "artist_line": "ржЖржорж┐ ржЖрж░ ржЖржкржирзЗ ржлрж╛ржЯрж╛ржпрж╝ ржлрж╛рж▓рж╛ржорзБ, рж░рж╛ржирзНржзржи рж╣ржЗрж▓рзЛ ржЧрж╛ ржЖрж░рзНржЯ ржЖржорж┐ ржЖрж░ ржЖржкржирзЗ рж╣ржЗрж▓рж╛ржо ржЧрж╛ ржЖрж░рзНржЯрж┐рж╕рзНржЯ, ржПржоржи рж░рж╛ржирзНржзрж╛ ржжрж┐ржорзБ ржЦрж╛ржЗржпрж╝рж╛ ржорж╛ржЗржирж╖рзЗ рж╣рж╛ржд ржЪрж╛ржЯржмрзЛ, ржкрзНрж▓рзЗржЯ ржнрж┐ ржЦрж╛ржЗржпрж╝рж╛ ржлрж╛рж▓рж╛ржЗржмрж╛рж░ ржкрж╛рж░рзЗ, ржЦрж╛рж▓рж┐ ржпрж╛ ржХржЗ ржоржиржпрзЛржЧ ржжрж┐ржпрж╝рж╛ ржХрж░ржмрзЗржи, рж░рж╛ржирзНржзрж╛ ржзрзБржЗржпрж╝рж╛ ржЕржирзНржпржжрж┐ржХрзЗ ржХрж╛ржмржЬрж╛ржм ржХрж░ржмрзЗржи ржирж╛ред",
  "ingredients_heading": "ЁЯН┤ рж░рж╛ржирзНржзржирзЗрж░ рж▓рж╛ржЗржЧрж╛ ржЖржЧрзЗ ржерзЗржЗржХрж╛ ржпрж╛ ржпрж╛ рж▓рж╛ржЧржмрзЛ, ржорж╛ржорж╛:",
  "ingredients": [
    { "category": "ржЧрзЛрж╕рзНрждрзЗрж░ ржЖржЗржЯрзЗржо", "items": ["ржЧрж░рзБрж░ ржЧрзЛрж╕рзНржд (ржЪрж╛ржХ ржмрж╛ рж╢ржВржХ ржорж╛ржВрж╢, ржПржХржЯрзБ ржорж╛рж▓рзЗ ржЪрж░рзНржмрж┐ржУ ржерж╛ржХрж▓рзЗ ржлрж╛ржЯрж╛ржлрж╛ржЯрж┐) тАФ рзлрзжрзж ржЧрзНрж░рж╛ржо", "ржЧрж░рзБрж░ рж╣рж╛ржбрзНржбрж┐ (рж╢ржВржХрзЗрж░) тАФ рззрзжрзж-рзирзжрзж ржЧрзНрж░рж╛ржо (ржПржЗржЯрж╛ ржжрж┐рж▓рзЗ ржПржХрзНржХрзЗрж░рзЗ ржЭрзЛрж▓рзЗрж░ ржЭрж╛ржБржЬ ржмрзЗржбрж╝рж╛ ржпрж╛ржЗржмрзЛ ржнрж╛ржЗ!)"] },
    { "category": "рждрзЗрж╣рж╛рж░рж┐рж░ ржорж╕рж▓рж╛", "items": ["ржПрж▓рж╛ржЪ ржжрж╛ржирж╛ тАФ рзй ржЪрж╛ ржЪрж╛ржоржЪ", " ржжрж╛рж░рзБржЪрж┐ржирж┐ тАФ рзй ржЯрж╛ рж╕рзНржЯрж┐ржХ", "ржЬржпрж╝ржлрж▓ ржЧрзБржБржбрж╝рж╛ тАФ ржЖржзрж╛ ржЪрж╛ ржЪрж╛ржоржЪ ржмрж╛ рзз ржЪрж╛ ржЪрж╛ржоржЪ", "ржЬржпрж╝рждрзНрж░рж┐ тАФ рзи ржЯрзБржХрж░рж╛ ржмрж╛ рзз ржЪрж╛ ржЪрж╛ржоржЪ ржЧрзБржБржбрж╝рж╛", "ржЬрж┐рж░рж╛ ржЧрзБржБржбрж╝рж╛ тАФ рзи ржЪрж╛ ржЪрж╛ржоржЪ", "ржзржирзЗ ржЧрзБржБржбрж╝рж╛ тАФ рзи ржЪрж╛ ржЪрж╛ржоржЪ", "рждрзЗржЬржкрж╛рждрж╛ тАФ рзз ржЯрж╛ ржмржбрж╝", "ржорж░рж┐ржЪ ржЧрзБржБржбрж╝рж╛ тАФ рзи ржЪрж╛ ржЪрж╛ржоржЪ", "ржмржбрж╝ ржПрж▓рж╛ржЪ тАФ рзз ржЯрж╛", "ржХрж╛рж▓рзЛржЬрж┐рж░рж╛ тАФ рзз ржЪрж╛ ржЪрж╛ржоржЪ"] },
    { "category": "рждрзЗрж▓", "items": ["рж╕рж░рж┐рж╖рж╛рж░ рждрзЗрж▓ тАФ рзз/рзк ржХрж╛ржк", "рж╕ржпрж╝рж╛ржмрж┐ржи/ржнрзЗржЬрж┐ржЯрзЗржмрж▓ рждрзЗрж▓ тАФ рзз/рзк ржХрж╛ржк"] },
    { "category": "ржЖрж░ржУ ржпрж╛ ржпрж╛ рж▓рж╛ржЧржмрзЛ", "items": ["ржкрж┐ржпрж╝рж╛ржЬ ржХрзБржЪрж┐ тАФ ржЖржзрж╛ ржХрж╛ржк", "ржЖржжрж╛ ржмрж╛ржЯрж╛ тАФ рзи ржЯрзЗржмрж┐рж▓ ржЪрж╛ржоржЪ", "рж░рж╕рзБржи ржмрж╛ржЯрж╛ тАФ рзи ржЯрзЗржмрж┐рж▓ ржЪрж╛ржоржЪ", "ржХрж╛ржБржЪрж╛ ржорж░рж┐ржЪ ржХрзБржЪрж┐ ржмрж╛ ржерзЗржБрждрзЛ тАФ рзл ржЯрж╛", "рж▓ржмржг тАФ рзз ржЯрзЗржмрж┐рж▓ ржЪрж╛ржоржЪ", "ржЯржХ ржжржЗ тАФ рзй ржЯрзЗржмрж┐рж▓ ржЪрж╛ржоржЪ", "ржЪрж┐ржирж┐ тАФ рзз ржЪрж╛ ржЪрж╛ржоржЪ"] },
    { "category": "ржЪрж╛рж▓", "items": ["ржХрж╛рж▓рж┐ржЬрж┐рж░рж╛/ржЪрж┐ржирж┐ржЧрзБржбрж╝рж╛ ржЪрж╛рж▓ тАФ рзи.рзл ржХрж╛ржк", "ржЧрж░ржо ржкрж╛ржирж┐ тАФ рзй ржХрж╛ржк", "ржЧрж░ржо ржжрзБржз тАФ рзз ржХрж╛ржк", "рж▓ржмржг тАФ рзз ржЪрж╛ ржЪрж╛ржоржЪ"] },
    { "category": "ржлрж┐ржирж┐рж╢рж┐ржВ ржЯрж╛ржЪ", "items": ["ржХрж╛ржБржЪрж╛ ржорж░рж┐ржЪ тАФ рзо-рззрзж ржЯрж╛", "ржХрзЗржУржбрж╝рж╛ ржкрж╛ржирж┐ тАФ рзз ржЪрж╛ ржЪрж╛ржоржЪ", "ржШрж┐ тАФ рзз ржЯрзЗржмрж┐рж▓ ржЪрж╛ржоржЪ"] }
  ],
  "instructions_heading": "ЁЯСитАНЁЯН│ ржЖрж╣рзЗржи рж░рж╛ржирзНржзрж╛ рж╢рзБрж░рзБ ржХрж░рж┐ ржорж╛ржорж╛ тАФ",
  "instructions": [
    "ржорж╕рж▓рж╛ ржЧрзБржБржбрж╝рж╛ ржХржЗрж░рж╛ рж░рзЗржбрж┐ рж░рж╛ржЗржЦрзЗржи тАФ (ржПржХрзНржХрзЗрж░рзЗ рж╢рзБржХржирж╛ ржорж╕рж▓рж╛ ржПржХрждрзНрж░ ржХржЗрж░рж╛ ржЧрзБржБржбрж╝рж╛ ржмрж╛ржирж╛ржпрж╝рж╛ ржирзЗржиред ржнрж╛ржЬрж╛ рж▓рж╛ржЧржмрзЛ ржирж╛ тАФ ржХрж╛ржБржЪрж╛ржЗ ржжрж┐ржмрзЗржи тАФ рждрзЗрж╣рж╛рж░рж┐рж░ ржПржЗржЯрж╛ржЗ ржЖрж╕рж▓ ржоржЬрж╛!)",
    "ржЧрзЛрж╕рзНржд рж░рзЗржбрж┐ ржХрж░рзЗржи тАФ (ржЧрзЛрж╕рзНрждрзЗрж░ рж╣рж╛ржбрзНржбрж┐-рж╕рж╣ ржЫрзЛржЯ ржЫрзЛржЯ ржЯрзБржХрж░рж╛ ржХрж╛ржЗржЯрзНржЯрж╛ ржирзЗржиред рж╣рж╛ржбрзНржбрж┐ ржЫрж╛ржбрж╝рж╛ рж░рж╛ржирзНржзрж▓рзЗ ржХрж┐ рж╣ржмрзЗ ржорж╛ржорж╛! ржЕржЗ рж╣рж╛ржбрзНржбрж┐ ржерж╛ржЗржХрж╛ ржЬрзЗрж▓рж┐ ржЖржЗрж╕рж╛ ржЭрзЛрж▓ржЯрж╛ ржПржХрзНржХрзЗрж░рзЗ ржЬржорж╛ржЗржпрж╝рж╛ ржжрж┐ржорзБ!)",
    "рждрзЗрж▓ ржЧрж░ржо ржХрж░рзЗржи тАФ (ржПржХржЯрж╛ ржмржбрж╝ ржкрж╛рждрж┐рж▓рзЗ рж╕рж░рж┐рж╖рж╛рж░ рждрзЗрж▓ ржЖрж░ рж╕ржпрж╝рж╛ржмрж┐ржи рждрзЗрж▓ ржПржХрж╕рж╛ржерзЗ ржЧрж░ржо ржХрж░рзЗржиред рждрзЗрж▓ ржЪрж╛ржЗрж▓рзЗ ржЕрж░рзНржзрзЗржХ ржЕрж░рзНржзрзЗржХ ржорж┐рж▓рж╛ржЗрж▓рзЗ рж╕рзЗржЗ рж░ржХржо ржЧржирзНржз ржЖржЗржмрзЛ ржкрзБрж░рж╛ржи ржврж╛ржХрж╛рж░!)",
    "ржкрж┐ржпрж╝рж╛ржЬ ржнрж╛ржЬрзЗржи тАФ (рждрзЗрж▓ ржЧрж░ржо рж╣ржЗрж▓рзЗ ржкрж┐ржпрж╝рж╛ржЬ ржХрзБржЪрж┐ ржжрж┐ржпрж╝рж╛ ржорж┐ржбрж┐ржпрж╝рж╛ржо рж╣рж┐ржЯрзЗ ржнрж╛ржЬрзЗржи ржпрждржХрзНрж╖ржг ржирж╛ рж╕рзБржирзНржжрж░ ржЧрзЛрж▓рзНржбрзЗржи ржХрж╛рж▓рж╛рж░ рж╣ржЗржпрж╝рж╛ ржпрж╛ржпрж╝ред ржкрзБржЗрж░рж╛ ржлрзЗрж▓рж▓рзЗ ржХрж┐ржирзНрждрзБ ржХрж╛рж▓рж╛ ржХрж╛рж▓рж╛ рж╣ржЗржпрж╝рж╛ ржпрж╛ржЗржмрзЛ тАФ ржЦрзЗржпрж╝рж╛рж▓ ржХржЗрж░рзЗржи!)",
    "ржЖржжрж╛-рж░рж╕рзБржи-ржХрж╛ржБржЪрж╛ ржорж░рж┐ржЪ ржжрзЗржи тАФ (ржПржмрж╛рж░ ржЖржжрж╛ ржмрж╛ржЯрж╛, рж░рж╕рзБржи ржмрж╛ржЯрж╛, ржХрж╛ржБржЪрж╛ ржорж░рж┐ржЪ ржжрж┐ржпрж╝рж╛ рзи-рзй ржорж┐ржирж┐ржЯ ржирж╛ржбрж╝рж╛ржЪрж╛ржбрж╝рж╛ ржХржЗрж░рж╛ ржнрж╛ржЬрзЗржиред ржорж╛ржорж╛, ржЪрж╛ржоржЪ ржарж┐ржХ ржарж╛ржХ ржЪрж╛рж▓рж╛ржЗржмрзЗржи тАФ ржкрзЛржбрж╝рж╛ ржЧржирзНржз ржЖржЗрж▓рзЗ рждрзЛ ржРржЦрж╛ржирзЗржЗ ржмрж┐ржпрж╝рж╛!)",
    "ржорж╕рж▓рж╛ ржЖрж░ рж▓ржмржг ржжрзЗржи тАФ (ржПржЦржи ржЧрзБржБржбрж╝рж╛ ржорж╕рж▓рж╛ ржЖрж░ рж▓ржмржг ржжрж┐ржпрж╝рж╛ ржирж╛ржбрж╝рждрзЗ ржерж╛ржХрзЗржиред ржорж╛ржорж╛ ржЧрж░ржо ржкрж╛ржирж┐ ржЖржзрж╛ ржХрж╛ржк ржЫрж┐ржЯрж╛ржЗ ржжрзЗржи тАФ ржкрзЛржбрж╝рж╛ ржЖржЯржХрж╛ржЗржмрзЛ!)",
    "ржЧрзЛрж╕рзНржд ржврж╛рж▓рзЗржи тАФ (ржПржЗржмрж╛рж░ ржЧрж░рзБрж░ ржЧрзЛрж╕рзНржд ржЖрж░ рж╣рж╛ржбрзНржбрж┐ ржврж╛ржЗрж▓рзНрж▓рж╛ ржжрж┐ржпрж╝рж╛ ржирж╛ржбрж╝рждрзЗ ржерж╛ржХрзЗржи ржпрждржХрзНрж╖ржи ржирж╛ ржЧрзЛрж╕рзНрждрзЗрж░ рж░ржВ ржкрж╛рж▓рзНржЯрж╛ржпрж╝ ржпрж╛ржпрж╝ред ржЧрзЛрж╕рзНрждрзЗрж░ ржирж┐ржЬрзЗрж░ ржкрж╛ржирж┐ ржпрж╣ржи рж╢рзБржХрж╛ржЗржпрж╝рж╛ ржЖржЗржмрзЛ, рждржЦржи ржмрзБржЭржмрзЗржи ржарж┐ржХржарж╛ржХ рж╣ржЗрждрж╛ржЫрзЗред \"ржЖржЗрждрж╛ржЫрзЗ ржорж╛ржорж╛, ржпрж╛ржЗрждрж╛ржЫрзЗ, ржЦрж╛ржЗржЫрзЗ ржЖржорж╛рж░рзЗ, ржПржХрж╢рждрзЗ ржПржХрж╢!\" ЁЯШД)",
    "ржжржЗ-ржЪрж┐ржирж┐ ржжрж┐ржпрж╝рж╛ ржХрж╖рж╛ржи тАФ (ржПржмрж╛рж░ ржжржЗ ржЖрж░ ржЪрж┐ржирж┐ ржорж┐рж╢рж╛ржпрж╝рж╛ ржврж╛ржЗрж▓рзНрж▓рж╛ ржжрзЗржиред ржирж░ржорж╛рж▓ ржЖржБржЪрзЗ ржХрж╖рж╛ржЗржпрж╝рж╛ ржжрж┐ржи тАФ ржорж╕рж▓рж╛ ржЧрж╛ржпрж╝рзЗ ржЧрж╛ржпрж╝рзЗ ржорж╛ржЦрж╛ ржорж╛ржЦрж╛ рж╣ржЗржпрж╝рж╛ рждрзЗрж▓ ржЙржкрж░рзЗ ржЖржЗрж▓рзЗржЗ ржмрзБржЭржмрзЗржи рждрзЗрж╣рж╛рж░рж┐ рж▓рж╛ржЗржЧрж╛ ржПржХрзНржХрзЗрж░рзЗ рж░рзЗржбрж┐ рж╣ржЗрждрж╛ржЫрзЗ!)",
    "ржЧрж░ржо ржкрж╛ржирж┐ ржжрж┐ржпрж╝рж╛ ржврж╛ржХржирж╛ рж▓рж╛ржЧрж╛ржи тАФ (ржПржЦржи рзи ржХрж╛ржк ржЧрж░ржо ржкрж╛ржирж┐ ржврж╛ржЗрж▓рзНрж▓рж╛ ржорж╛ржЭрж╛рж░рж┐ ржЖржБржЪрзЗ рзкрзл ржорж┐ржирж┐ржЯ ржврж╛ржХржирж╛ ржжрж┐ржпрж╝рж╛ рж░рж╛ржирзНржзрзЗржиред ржорж╛ржЭрзЗ ржорж╛ржЭрзЗ ржЙржБржХрж┐ ржжрж┐ржмрзЗржи, ржирж┐ржЪрзЗ рж▓рж╛ржЧрж▓рзЗ ржХрж┐ржирзНрждрзБ ржПржХрзНржХрзЗрж░рзЗ ржмрж┐ржпрж╝рж╛ред рзкрзл ржорж┐ржирж┐ржЯ ржкрж░ ржжрзЗржЦржмрзЗржи ржЧрзЛрж╕рзНржд рж╕рж┐ржжрзНржж рж╣ржЗржпрж╝рж╛ рж╣рж╛ржбрзНржбрж┐ ржерж╛ржЗржХрж╛ ржоржЬрзНржЬрж╛ ржмрзЗрж░ рж╣ржЗржпрж╝рж╛ ржЧрзЗржЫрзЗ! ржПржЗ ржЧрзЛрж╕рзНржд ржЖрж▓рж╛ржжрж╛ ржмрж╛ржЯрж┐рждрзЗ ржЙржарж╛ржЗржпрж╝рж╛ рж░рж╛ржЦрзЗржиред ржкрж╛рждрж┐рж▓рзЗрж░ рждрзЗрж▓ ржЖрж░ ржЭрзЛрж▓ рж░рж╛ржЦрзЗржиред)",
    "ржПржЦржи ржЪрж╛ржЙрж▓ ржирж┐ржпрж╝рж╛ ржЦрзЗрж▓рж╛ ржЬржорж╛ржЗ тАФ (ржкрж╛рждрж┐рж▓рзЗрж░ рждрзЗрж▓-ржЭрзЛрж▓рзЗ ржзрзБржЗржпрж╝рж╛ ржЖржирж╛ ржЪрж╛рж▓ржЯрж╛ ржжрж┐ржпрж╝рж╛ ржорж╛ржЭрж╛рж░рж┐ ржЖржБржЪрзЗ ржнрж╛ржЬрзЗржиред рж╕рж╛ржжрж╛ ржЪрж╛рж▓ ржмрж╛ржжрж╛ржорж┐ рж░ржЩ ржЖржЗрж▓рзЗржЗ ржмрзБржЭржмрзЗржи рж░рзЗржбрж┐ред ржнрж╛ржЗрж░рзЗ, ржЪрж╛рж▓ ржирж┐ржЪрзЗ рж▓рж╛ржЧрж╛ржЗрж▓рзЗ ржПржХржжржо ржорж╛ржорж╛рж░ ржХрж╛ржирзЗрж░ ржирж┐ржЪрзЗ ржзржЗрж░рж╛ ржжрж┐ржмрзЛ! ржЦрзЗржпрж╝рж╛рж▓ ржХржЗрж░рзЗржи!)",
    "ржкрж╛ржирж┐-ржжрзБржз-рж▓ржмржг ржжрзЗржи тАФ (ржЧрж░ржо ржкрж╛ржирж┐ рзй ржХрж╛ржк, ржЧрж░ржо ржжрзБржз рзз ржХрж╛ржк, ржЖрж░ рж▓ржмржг ржорж┐рж╢рж╛ржпрж╝рж╛ ржжрзЗржиред ржЖржБржЪ ржмрж╛ржбрж╝рж╛ржЗржпрж╝рж╛ ржжрзЗржи тАФ ржлрзБржЯрждрзЗ рж╢рзБрж░рзБ ржХрж░рж▓рзЗ ржПржХржмрж╛рж░ ржЪрж╛ржЦрзЗржиред рж▓ржмржг ржПржХржЯрзБ ржмрзЗрж╢рж┐ рж╣ржЗрж▓рзЗ ржнрж╛рж▓рзЛ тАФ ржЪрж╛рж▓ ржлрзБржЯрзЗ ржЧрзЗрж▓рзЗ ржарж┐ржХ рж╣ржЗржпрж╝рж╛ ржпрж╛ржмрзЗред)",
    "ржЧрзЛрж╕рзНржд-ржХрж╛ржБржЪрж╛ ржорж░рж┐ржЪ ржорж┐ржХрзНрж╕ тАФ (ржЬржЦржи ржЪрж╛рж▓ ржЖрж░ ржкрж╛ржирж┐рж░ рж▓рзЗржнрзЗрж▓ ржПржХ рж╣ржЗржпрж╝рж╛ ржЖржЗржмрзЛ, рждржЦржи ржЖржЧрзЗ рж░рж╛ржирзНржзрж╛ ржЧрзЛрж╕рзНржд ржЖрж░ ржХрж╛ржБржЪрж╛ ржорж░рж┐ржЪ рзо-рззрзж ржЯрж╛ ржжрж┐ржпрж╝рж╛ ржЖрж╕рзНрждрзЗ ржЖрж╕рзНрждрзЗ ржорж┐ржХрзНрж╕ ржХрж░ржмрзЗржиред ржЪрж╛рж▓ ржнрж╛ржЩрзНржЧрж▓рзЗ рждрзЛ ржлрж┐ржирж┐рж╢! ржЦрж╛рж▓рж┐ рж╕рзНржкрзНржпрж╛ржЪрзБрж▓рж╛ ржмрж╛ ржХрж╛ржарзЗрж░ ржЪрж╛ржоржЪрзЗ ржЖрж╕рзНрждрзЗ ржЖрж╕рзНрждрзЗ ржирж╛ржбрж╝рзЗржи ржорж╛ржорж╛)",
    "ржврж╛ржХржирж╛ ржжрж┐ржпрж╝рж╛ ржПржХрзНржХрзЗрж░рзЗ рж▓рзЛ ржЖржБржЪрзЗ рзкрзж ржорж┐ржирж┐ржЯ ржжржорзЗ рж░рж╛ржЦрзЗржиред (ржорж╛ржЭрзЗ ржорж╛ржЭрзЗ ржЖрж╕рзНрждрзЗ ржЙржБржХрж┐ ржжрж┐ржпрж╝рж╛ ржЪрзЗржХ ржХржЗрж░рзЗржиред)",
    "ржХрзЗржУржбрж╝рж╛ ржкрж╛ржирж┐-ржШрж┐ ржлрж┐ржирж┐рж╢рж┐ржВ тАФ (ржЪрж╛рж▓ рж╕рж┐ржжрзНржж рж╣ржЗрж▓рзЗ ржЙржкрж░ ржжрж┐ржпрж╝рж╛ ржХрзЗржУржбрж╝рж╛ ржкрж╛ржирж┐ рзз ржЪрж╛ ржЪрж╛ржоржЪ ржЖрж░ ржШрж┐ рзз ржЪрж╛ ржЪрж╛ржоржЪ ржЫрж┐ржЯрж╛ржЗржпрж╝рж╛ ржжрж┐ржорзБред ржЧрзНржпрж╛рж╕ ржмржирзНржз ржХржЗрж░рж╛ ржврж╛ржХржирж╛ рж▓рж╛ржЧрж╛ржпрж╝рж╛ ржжрж┐ржорзБред)"
  ],
  "serving": "ржорж╛ржорж╛, ржПржЦржи ржЦрж╛рж▓рж┐ ржПржХ ржЧрзНрж▓рж╛рж╕ ржмрж░рж╣рж╛ржирж┐, ржкрж┐ржпрж╝рж╛ржЬ ржХрзБржЪрж┐, рж╢рж╢рж╛рж░ рж╕рзНрж▓рж╛ржЗрж╕, рж▓рзЗржмрзБрж░ ржЯрзБржХрж░рж╛ ржирж┐ржпрж╝рж╛ ржЦрж╛ржЗрж▓рзЗ...ржПржХрж╢рждрзЗ ржПржХрж╢!"
},
{
  "intro": "рждрж╛ржЗрж▓рзЗ ржорж╛ржорж╛, ржЪрж▓рзЗржи ржПржХржЦрж╛ржи ржкрзБрж░рж╛ржи ржврж╛ржХрж╛рж░ ржЖрж╕рж▓ ржЦрж╛рж╕рж┐рж░ рж░рзЗржЬрж╛рж▓рж╛ рж░рж╛ржирзНржзрж┐ред",
  "artist_line": "ржЖржорж┐ ржЖрж░ ржЖржкржирзЗ ржлрж╛ржЯрж╛ржпрж╝ ржлрж╛рж▓рж╛ржорзБ, рж░рж╛ржирзНржзржи рж╣ржЗрж▓рзЛ ржЧрж╛ ржЖрж░рзНржЯ ржЖржорж┐ ржЖрж░ ржЖржкржирзЗ рж╣ржЗрж▓рж╛ржо ржЧрж╛ ржЖрж░рзНржЯрж┐рж╕рзНржЯ, ржПржоржи рж░рж╛ржирзНржзрж╛ ржжрж┐ржорзБ ржЦрж╛ржЗржпрж╝рж╛ ржорж╛ржЗржирж╖рзЗ рж╣рж╛ржд ржЪрж╛ржЯржмрзЛ, ржкрзНрж▓рзЗржЯ ржнрж┐ ржЦрж╛ржЗржпрж╝рж╛ ржлрж╛рж▓рж╛ржЗржмрж╛рж░ ржкрж╛рж░рзЗ, ржЦрж╛рж▓рж┐ ржпрж╛ ржХржЗ ржоржиржпрзЛржЧ ржжрж┐ржпрж╝рж╛ ржХрж░ржмрзЗржи, рж░рж╛ржирзНржзрж╛ ржзрзБржЗржпрж╝рж╛ ржЕржирзНржпржжрж┐ржХрзЗ ржХрж╛ржмржЬрж╛ржм ржХрж░ржмрзЗржи ржирж╛ред",
  "ingredients_heading": "ЁЯН┤ рж░рж╛ржирзНржзржирзЗрж░ рж▓рж╛ржЗржЧрж╛ ржЖржЧрзЗ ржерзЗржЗржХрж╛ ржпрж╛ ржпрж╛ рж▓рж╛ржЧржмрзЛ, ржорж╛ржорж╛:",
  "ingredients": [
    { "category": "ржЧрзЛрж╕рзНрждрзЗрж░ ржЖржЗржЯрзЗржо", "items": ["ржЦрж╛рж╕рж┐рж░ ржорж╛ржВрж╕ (рж╣рж╛рзЬ-рж╕рж╣ ржорж╛ржЭрж╛рж░рж┐ ржЯрзБржХрж░рж╛) тАФ рзз ржХрзЗржЬрж┐", "ржкрзЗржБрзЯрж╛ржЬ ржХрзБржЪрж┐ тАФ рзз ржХрж╛ржк (ржмрзЗрж░рзЗрж╕рзНрждрж╛рж░ ржЬржирзНржп)", "ржкрзЗржБрзЯрж╛ржЬ ржмрж╛ржЯрж╛ тАФ рзз/рзи ржХрж╛ржк"] },
    { "category": "ржорж╕рж▓рж╛", "items": ["ржЖржжрж╛ ржмрж╛ржЯрж╛ тАФ рзи ржЯрзЗржмрж┐рж▓ ржЪрж╛ржоржЪ", "рж░рж╕рзБржи ржмрж╛ржЯрж╛ тАФ рзз.рзл ржЯрзЗржмрж┐рж▓ ржЪрж╛ржоржЪ", "рж╢рзБржХржирж╛ ржорж░рж┐ржЪ (ржЧрзЛржЯрж╛) тАФ рзл-рзмржЯрж╛", "ржжрж╛рж░рзБржЪрж┐ржирж┐ тАФ рзй-рзк ржЯрзБржХрж░рж╛", "ржПрж▓рж╛ржЪ тАФ рзл-рзмржЯрж╛", "рж▓ржмржЩрзНржЧ тАФ рзк-рзлржЯрж╛", "рждрзЗржЬржкрж╛рждрж╛ тАФ рзиржЯрж╛", "рж╕рж╛ржжрж╛ ржЧрзЛрж▓ржорж░рж┐ржЪ ржЧрзБржБрзЬрж╛ тАФ рзз ржЪрж╛ ржЪрж╛ржоржЪ", "ржЬрзЯржлрж▓-ржЬрзЯрждрзНрж░рж┐ ржЧрзБржБрзЬрж╛ тАФ рзз/2 ржЪрж╛ ржЪрж╛ржоржЪ", "ржЬрж┐рж░рж╛ ржЧрзБржБрзЬрж╛ тАФ рзз ржЪрж╛ ржЪрж╛ржоржЪ", "ржзржирзЗ ржЧрзБржБрзЬрж╛ тАФ рзз ржЪрж╛ ржЪрж╛ржоржЪ", "ржХрж╛рж╢рзНржорзАрж░рж┐ рж▓рж╛рж▓ ржорж░рж┐ржЪ ржЧрзБржБрзЬрж╛ тАФ рзз ржЪрж╛ ржЪрж╛ржоржЪ (рж░ржЩрзЗрж░ ржЬржирзНржп)", "рж▓ржмржг тАФ рж╕рзНржмрж╛ржжржорждрзЛ"] },
    { "category": "ржЕржирзНржпрж╛ржирзНржп", "items": ["рж╕рж░рзНрж╖рзЗрж░ рждрзЗрж▓/рж╕рж╛ржжрж╛ рждрзЗрж▓ тАФ рзз/рзи ржХрж╛ржк", "ржЯржХ ржжржЗ тАФ рзз ржХрж╛ржк", "ржкрзЗрж╕рзНрждрж╛ржмрж╛ржжрж╛ржо ржмрж╛ржЯрж╛ тАФ рзи ржЯрзЗржмрж┐рж▓ ржЪрж╛ржоржЪ", "ржХрж╛ржЬрзБржмрж╛ржжрж╛ржо ржмрж╛ржЯрж╛ тАФ рзи ржЯрзЗржмрж┐рж▓ ржЪрж╛ржоржЪ", "ржкрзЛрж╕рзНржд ржжрж╛ржирж╛ ржмрж╛ржЯрж╛ тАФ рзз ржЯрзЗржмрж┐рж▓ ржЪрж╛ржоржЪ", "ржирж╛рж░ржХрзЗрж▓рзЗрж░ ржжрзБржз (ржШржи) тАФ рзз/рзи ржХрж╛ржк", "ржХрзЗржУрзЬрж╛ ржЬрж▓ тАФ рзз ржЪрж╛ ржЪрж╛ржоржЪ", "ржЧрзЛрж▓рж╛ржк ржЬрж▓ тАФ рзз ржЪрж╛ ржЪрж╛ржоржЪ", "ржХрж╛ржБржЪрж╛ ржорж░рж┐ржЪ (ржЖрж╕рзНржд) тАФ рзл-рзмржЯрж╛", "ржЪрж┐ржирж┐ тАФ рзз ржЪрж╛ ржЪрж╛ржоржЪ", "ржШрж┐ тАФ рзи ржЯрзЗржмрж┐рж▓ ржЪрж╛ржоржЪ"] }
  ],
  "instructions_heading": "ЁЯСитАНЁЯН│ ржЖрж╣рзЗржи рж░рж╛ржирзНржзрж╛ рж╢рзБрж░рзБ ржХрж░рж┐ ржорж╛ржорж╛ тАФ",
  "instructions": [
    "ржкрзНрж░ржержорзЗ ржПржХржЯрж╛ ржЧрж░ржо рж╣рж╛ржБржбрж╝рж┐рждрзЗ рждрзЗрж▓ ржЧрж░ржо ржХржЗрж░рж╛ ржкрзЗржБржпрж╝рж╛ржЬ ржХрзБржЪрж┐ рж▓рж╛рж▓ ржХржЗрж░рж╛ ржмрзЗрж░рзЗрж╕рзНрждрж╛ ржмрж╛ржирж╛ржЗржпрж╝рж╛ ржЕрж░рзНржзрзЗржХржЯрж╛ рждрзБржЗрж▓рж╛ рж░рж╛ржЦрзЗржиред ржмрж╛ржХрж┐ ржкрзЗржБржпрж╝рж╛ржЬрзЗ ржЖрж╕рзНржд ржЧрж░ржо ржорж╕рж▓рж╛ (ржжрж╛рж░рзБржЪрж┐ржирж┐, ржПрж▓рж╛ржЪ, рж▓ржмржЩрзНржЧ, рждрзЗржЬржкрж╛рждрж╛) ржЖрж░ рж╢рзБржХржирж╛ ржорж░рж┐ржЪ ржжрж┐ржпрж╝рж╛ ржнрж╛ржЬрзЗржиред\\n(ржорж╛ржорж╛, ржкрзЗржБржпрж╝рж╛ржЬржЯрж╛ рж▓рж╛рж▓ рж╣ржЗржмрзЛ, ржХрж┐ржирзНрждрзБ ржкрзБржЗрж░рж╛ ржХрж╛рж▓рж╛ ржХржЗрж░рж╛ ржлрзЗрж▓рж▓рзЗ ржХрж┐ржирзНрждрзБ ржоржЬрж╛ ржпрж╛ржЗржмрзЛржЧрж╛!)",
    "ржПрж╣ржи ржкрзЗржБржпрж╝рж╛ржЬ ржмрж╛ржЯрж╛, ржЖржжрж╛ ржмрж╛ржЯрж╛ ржЖрж░ рж░рж╕рзБржи ржмрж╛ржЯрж╛ ржжрж┐ржпрж╝рж╛ ржнрж╛рж▓рзЛ ржХржЗрж░рж╛ ржХрж╖рж╛ржиред ржПржХржЯрзБ ржкрж╛ржирж┐ ржжрж┐ржпрж╝рзЗржи ржпрж╛рждрзЗ ржорж╕рж▓рж╛ ржирж╛ ржкрзБржбрж╝рзЗред\\n(ржорж╛ржорж╛, ржорж╕рж▓рж╛ ржпржд ржХрж╖рж╛ржЗржмрзЗржи, рж░рзЗржЬрж╛рж▓рж╛рж░ рж╕рзНржмрж╛ржж рждржд ржЦрзБрж▓ржмрзЛ!)",
    "ржПржмрж╛рж░ ржЦрж╛рж╕рж┐рж░ ржорж╛ржВрж╕ ржврж╛ржЗрж▓рзНрж▓рж╛ ржжрзЗржиред рж▓ржмржг, ржЬрж┐рж░рж╛ ржЧрзБржБрзЬрж╛, ржзржирзЗ ржЧрзБржБрзЬрж╛, рж╕рж╛ржжрж╛ ржЧрзЛрж▓ржорж░рж┐ржЪ ржЧрзБржБрзЬрж╛ ржЖрж░ ржХрж╛рж╢рзНржорзАрж░рж┐ рж▓рж╛рж▓ ржорж░рж┐ржЪ ржЧрзБржБрзЬрж╛ ржжрж┐ржпрж╝рж╛ ржнрж╛рж▓ ржХржЗрж░рж╛ ржХрж╖рж╛ржиред ржорж╛ржВрж╕рзЗрж░ рж░ржВ ржмржжрж▓рж╛ржЗрж▓рзЗ ржврж╛ржЗржХрж╛ ржжрзЗржи, ржирж┐ржЬрзЗрж░ ржкрж╛ржирж┐ржд рж╕рж┐ржжрзНржз рж╣ржЗржмрзЛред\\n(ржЖржЗрждрж╛ржЫрзЗ ржорж╛ржорж╛, ржпрж╛ржЗрждрж╛ржЫрзЗ, ржЦрж╛ржЗржЫрзЗ ржЖржорж╛рж░рзЗ, ржПржХрж╢рждрзЗ ржПржХрж╢!)",
    "ржорж╛ржВрж╕рзЗрж░ ржкрж╛ржирж┐ рж╢рзБржХрж╛ржЗрзЯрж╛ рждрзЗрж▓ ржЙржкрж░рзЗ ржЖржЗрж▓рзЗ ржЯржХ ржжржЗ ржЖрж░ ржЪрж┐ржирж┐ ржжрж┐ржпрж╝рж╛ ржЖрж░ржУ ржХрж┐ржЫрзБржХрзНрж╖ржг ржХрж╖рж╛ржиред ржЦрзЗржпрж╝рж╛рж▓ рж░рж╛ржЗржЦрзЗржи, ржжржЗржЯрж╛ ржпрзЗржи ржлрзЗржЯрзЗ ржирж╛ ржпрж╛ржпрж╝ред\\n(ржорж╛ржорж╛, ржжржЗржЯрж╛ ржжрж┐рж▓рзЗ ржЧрзНрж░рзЗржнрж┐ржЯрж╛ ржПржХрзНржХрзЗрж░рзЗ ржорж╛ржЦрзЛ ржорж╛ржЦрзЛ рж╣ржЗржмрзЛ, ржжрзЗржЦрж▓рзЗржЗ ржЬрж┐ржнрзЗ ржкрж╛ржирж┐!)",
    "ржПрж╣ржи ржкрзЗрж╕рзНрждрж╛ржмрж╛ржжрж╛ржо ржмрж╛ржЯрж╛, ржХрж╛ржЬрзБржмрж╛ржжрж╛ржо ржмрж╛ржЯрж╛ ржЖрж░ ржкрзЛрж╕рзНржд ржжрж╛ржирж╛ ржмрж╛ржЯрж╛ ржжрж┐ржпрж╝рж╛ ржЖржмрж╛рж░ржУ ржХрж╖рж╛ржиред ржПржЗржЯрж╛ рж░рзЗржЬрж╛рж▓рж╛рж░ ржЖрж╕рж▓ ржШржи ржЧрзНрж░рзЗржнрж┐ ржЖржиржмрзЛред\\n(ржПржЗ ржмрж╛ржжрж╛ржо ржмрж╛ржЯрж╛ ржирж╛ ржжрж┐рж▓рзЗ ржХрж┐ржирзНрждрзБ рж░рзЗржЬрж╛рж▓рж╛рж░ рж╕рзЗржЗ рж╢рж╛рж╣рзА рж╕рзНржмрж╛ржжржЯрж╛ ржЖрж╕ржмрзЛ ржирж╛, ржорж╛ржорж╛!)",
    "ржорж╛ржВрж╕ ржкрзНрж░рж╛ржпрж╝ рж╕рж┐ржжрзНржз рж╣ржЗржпрж╝рж╛ ржЧрзЗрж▓рзЗ ржирж╛рж░ржХрзЗрж▓рзЗрж░ ржШржи ржжрзБржз, ржХржпрж╝рзЗржХржЯрж╛ ржЖрж╕рзНржд ржХрж╛ржБржЪрж╛ ржорж░рж┐ржЪ ржЖрж░ ржХрзЗржУрзЬрж╛ ржЬрж▓ ржУ ржЧрзЛрж▓рж╛ржк ржЬрж▓ ржорж┐рж╢рж╛ржЗржпрж╝рж╛ ржжрзЗржиред ржХржо ржЖржБржЪрзЗ ржЖрж░ржУ рззрзл-рзирзж ржорж┐ржирж┐ржЯ ржжржорзЗ рж░рж╛ржЦрзЗржи, ржпрждржХрзНрж╖ржг ржирж╛ ржорж╛ржВрж╕ ржПржХржжржо ржирж░ржо рж╣ржЗржпрж╝рж╛ ржпрж╛ржпрж╝ ржЖрж░ рждрзЗрж▓ ржЙржкрж░рзЗ ржнрж╛ржЗрж╕рж╛ ржЙржарзЗред\\n(ржжржорзЗ рж░рж╛ржЦрж▓рзЗ рж╕рзНржмрж╛ржжржЯрж╛ ржорж╛ржВрж╕рзЗрж░ ржЧржнрзАрж░рзЗ ржврзБржХржмрзЛ, ржмрзБржЭржЫрзЗржи ржорж╛ржорж╛!)",
    "ржирж╛ржорж╛ржирзЛрж░ ржЖржЧрзЗ ржЙржкрж░ ржжрж┐ржпрж╝рж╛ ржШрж┐ ржЫрзЬрж╛ржЗрзЯрж╛ ржжрзЗржи ржЖрж░ ржпрзЗржЗ ржмрзЗрж░рзЗрж╕рзНрждрж╛ ржЖржЧрзЗ рждрзБржЗрж▓рж╛ рж░рж╛ржЦржЫрж┐рж▓рзЗржи, рж╕рзЗржЗржЯрж╛ ржЫрж┐ржЯрж╛ржЗрзЯрж╛ ржжрзЗржиред\\n(ржорж╛ржорж╛, ржПржЗржЯрж╛ рж╣ржЗрж▓рзЛ ржлрж┐ржирж┐рж╢рж┐ржВ ржЯрж╛ржЪ, ржПржЯрж╛рж░ ржЧржирзНржзрзЗ ржкрзБрж░рж╛ ржШрзНрж░рж╛ржгрзЗ ржо ржо ржХрж░ржмрзЛ!)"
  ],
  "serving": "ржорж╛ржорж╛, ржПржЗржмрж╛рж░ ржПржЗ рж╢рж╛рж╣рзА ржЦрж╛рж╕рж┐рж░ рж░рзЗржЬрж╛рж▓рж╛ ржЧрж░ржо ржЧрж░ржо ржкрзЛрж▓рж╛ржУ, ржкрж░рзЛржЯрж╛ ржмрж╛ ржирж╛ржи рж░рзБржЯрж┐рж░ рж▓ржЧрзЗ ржкрж░рж┐ржмрзЗрж╢ржи ржХрж░рзЗржи...ржЦрж╛рзЯрж╛ ржжрзЗржЦржмрзЗржи рж╣рж╛ржд ржЪрж╛ржЯрждрзЗ ржерж╛ржХржмрзЗржи! ржПржХрж╢рждрзЗ ржПржХрж╢!"
}
[END OUTPUT FORMAT]

ржЖржкржирж┐ рж╢рзБржзрзБ ржПржЗ JSON ржлрж░ржорзНржпрж╛ржЯ ржлрж▓рзЛ ржХрж░ржмрзЗржи, ржЕржирзНржп ржХрж┐ржЫрзБ рж▓рж┐ржЦржмрзЗржи ржирж╛ред
"""


def format_recipe_output(recipe_data):
    """
    Formats the parsed JSON recipe data into the desired string output.
    """
    formatted_string = ""

    # 1) Intro
    formatted_string += recipe_data.get("intro", "") + "\n"

    # 2) Artist Line
    artist_line_raw = recipe_data.get("artist_line", "ржЖржорж┐ ржЖрж░ ржЖржкржирзЗ ржлрж╛ржЯрж╛ржпрж╝ ржлрж╛рж▓рж╛ржорзБ, рж░рж╛ржирзНржзржи рж╣ржЗрж▓рзЛ ржЧрж╛ ржЖрж░рзНржЯ ржЖржорж┐ ржЖрж░ ржЖржкржирзЗ рж╣ржЗрж▓рж╛ржо ржЧрж╛ ржЖрж░рзНржЯрж┐рж╕рзНржЯ, ржПржоржи рж░рж╛ржирзНржзрж╛ ржжрж┐ржорзБ ржЦрж╛ржЗржпрж╝рж╛ ржорж╛ржЗржирж╖рзЗ рж╣рж╛ржд ржЪрж╛ржЯржмрзЛ, ржкрзНрж▓рзЗржЯ ржнрж┐ ржЦрж╛ржЗржпрж╝рж╛ ржлрж╛рж▓рж╛ржЗржмрж╛рж░ ржкрж╛рж░рзЗ, ржЦрж╛рж▓рж┐ ржпрж╛ ржХржЗ ржоржиржпрзЛржЧ ржжрж┐ржпрж╝рж╛ ржХрж░ржмрзЗржи, рж░рж╛ржирзНржзрж╛ ржзрзБржЗржпрж╝рж╛ ржЕржирзНржпржжрж┐ржХрзЗ ржХрж╛ржмржЬрж╛ржм ржХрж░ржмрзЗржи ржирж╛ред")
    formatted_string += f"{artist_line_raw}\n\n"


    # 3) Ingredients
    formatted_string += recipe_data.get("ingredients_heading", "ЁЯН┤ рж░рж╛ржирзНржзржирзЗрж░ рж▓рж╛ржЗржЧрж╛ ржЖржЧрзЗ ржерзЗржЗржХрж╛ ржпрж╛ ржпрж╛ рж▓рж╛ржЧржмрзЛ, ржорж╛ржорж╛:") + "\n"
    for category_obj in recipe_data.get("ingredients", []):
        category = category_obj.get("category")
        items = category_obj.get("items", [])
        if category:
            if "ржЧрзЛрж╕рзНржд" in category:
                formatted_string += f"ЁЯей {category} тАФ\n"
            elif "ржорж╕рж▓рж╛" in category:
                formatted_string += f"ЁЯМ╢я╕П {category} тАФ\n"
            elif "рждрзЗрж▓" in category:
                formatted_string += f"ЁЯЫвя╕П {category} тАФ\n"
            elif "рж▓рж╛ржЧржмрзЛ" in category:
                formatted_string += f"ЁЯзЕ {category} тАФ\n"
            elif "ржЪрж╛рж▓" in category:
                formatted_string += f"ЁЯНЪ {category} тАФ\n"
            elif "ржлрж┐ржирж┐рж╢рж┐ржВ" in category:
                formatted_string += f"тЬи {category} тАФ\n"
            elif "ржЕржирзНржпрж╛ржирзНржп" in category:
                formatted_string += f"ЁЯН▓ {category} тАФ\n"
            else:
                formatted_string += f"{category} тАФ\n"

        for item in items:
            formatted_string += f"{item}\n"
        formatted_string += "\n"

    # 4) Instructions
    formatted_string += recipe_data.get("instructions_heading", "ЁЯСитАНЁЯН│ ржЖрж╣рзЗржи рж░рж╛ржирзНржзрж╛ рж╢рзБрж░рзБ ржХрж░рж┐ ржорж╛ржорж╛ тАФ") + "\n"
    for i, step in enumerate(recipe_data.get("instructions", [])):
        bengali_numbers = ["тЮК", "тЮЛ", "тЮМ", "тЮН", "тЮО", "тЮП", "тЮР", "тЮС", "тЮТ", "тЮУ", "тУл", "тУм", "тУн", "тУо", "тУп", "тУ░", "тУ▒", "тУ▓", "тУ│", "тУ┤"]
        prefix = bengali_numbers[i] if i < len(bengali_numbers) else f"{i+1})"
        
        # We will split the step into instruction and comment part
        # The prompt is designed to generate "Instruction тАФ (Comment)" or "Instruction.\n(Comment)"
        # We try to handle both cases by splitting on 'тАФ (' or '\n('
        instruction_parts = step.split('тАФ (') 
        if len(instruction_parts) == 1: # If 'тАФ (' not found, try splitting by newline and opening parenthesis
            instruction_parts = step.split('\n(')

        main_instruction = instruction_parts[0].strip()
        fun_comment = ""
        if len(instruction_parts) > 1:
            # Reconstruct the comment from remaining parts and remove trailing ')'
            fun_comment = "(" + "(".join(instruction_parts[1:]).strip().rstrip(')') + ")"

        # If the main_instruction already contains a newline, we add the comment without extra newline
        if '\\n' in main_instruction:
            formatted_string += f"{prefix} {main_instruction}{fun_comment}\n\n"
        else: # Otherwise, add a newline between instruction and comment if comment exists
            if fun_comment:
                formatted_string += f"{prefix} {main_instruction}\n{fun_comment}\n\n"
            else:
                formatted_string += f"{prefix} {main_instruction}\n\n"

    # 5) Serving
    formatted_string += "ЁЯНЫ ржкрж░рж┐ржмрзЗрж╢ржиржГ\n" + recipe_data.get("serving", "")

    return formatted_string


@app.route('/ask-mama', methods=['POST'])
def ask_mama():
    """
    Handles requests to get a cooking recipe from Baburchi Mama.
    The response is generated using OpenAI API with a custom prompt.
    """
    data = request.json
    ingredients = data.get('ingredients')
    servings = data.get('servings')

    if not ingredients or not servings:
        return jsonify({"reply": "ЁЯеЪ ржорж╛ржорж╛, ржЗржиржкрзБржЯ ржжрзЗржи! ржХрж┐ рж░рж╛ржирзНржзржорзБ ржЖрж░ ржХрзЯржЬржирзЗрж░ ржЬржирзНржп?"}), 400

    user_message = f"ржХрж┐ рж░рж╛ржиржмрзЛ: {ingredients}, ржХржЬржирзЗрж░ ржЬржирзНржп: {servings}ред ржЖржорж╛рж░рзЗ ржПржЗржЯрж╛рж░ рж░рзЗрж╕рж┐ржкрж┐ ржжрзЗржиред"

    try:
        chat_completion = client.chat.completions.create(
            messages=[
                {"role": "system", "content": ASSISTANT_PROMPT},
                {"role": "user", "content": user_message}
            ],
            model="gpt-3.5-turbo",
            response_format={"type": "json_object"}
        )
        
        response_content = chat_completion.choices[0].message.content
        
        try:
            parsed_recipe_data = json.loads(response_content)
        except json.JSONDecodeError as e:
            print(f"JSON parsing error: {e}")
            print(f"Raw response from OpenAI: {response_content}")
            return jsonify({"reply": "тЭМ ржорж╛ржорж╛, рж░рзЗрж╕рж┐ржкрж┐ржЯрж╛ ржмрзБржЭрждрж╛ржЫрж┐ ржирж╛ред ржПржХржЯрзБ ржкрж░рзЗ ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзЗржиуАВ"}), 500

        reply = format_recipe_output(parsed_recipe_data)

        return jsonify({"reply": reply})

    except Exception as e:
        print(f"Error calling OpenAI API or formatting response: {e}")
        return jsonify({"reply": "тЭМ ржорж╛ржорж╛, ржХрж┐ржЫрзБ ржЧржгрзНржбржЧрзЛрж▓ рж╣ржЗржЫрзЗ... ржПржХржЯрзБ ржкрж░рзЗ ржЯрзНрж░рж╛ржЗ ржХрж░рзЗржиуАВ"}), 500

@app.route('/suggest-mama', methods=['POST'])
def suggest_mama():
    """
    Handles requests to get cooking suggestions from Baburchi Mama based on available ingredients.
    The response is generated using OpenAI API with a custom prompt.
    """
    data = request.json
    ingredients = data.get('ingredients')
    servings = data.get('servings')

    if not ingredients or not servings:
        return jsonify({"reply": "ЁЯеЪ ржорж╛ржорж╛, ржЗржиржкрзБржЯ ржжрзЗржи! ржХрж┐ ржХрж┐ ржЖржЫрзЗ ржЖрж░ ржХрзЯржЬржирзЗрж░ ржЬржирзНржп?"}), 400

    user_message = f"ржЖржорж╛рж░ ржмрж╛рзЬрж┐рждрзЗ/ржлрзНрж░рж┐ржЬрзЗ ржЖржЫрзЗ: {ingredients}, ржХржЬржирзЗрж░ ржЬржирзНржп: {servings}ред ржХрж┐ ржЦрж╛ржУрзЯрж╛ ржпрж╛рзЯ ржХржи рждрзЛ ржорж╛ржорж╛ред"

    try:
        chat_completion = client.chat.completions.create(
            messages=[
                {"role": "system", "content": ASSISTANT_PROMPT},
                {"role": "user", "content": user_message}
            ],
            model="gpt-3.5-turbo",
            response_format={"type": "json_object"}
        )
        
        response_content = chat_completion.choices[0].message.content
        
        try:
            parsed_suggestion_data = json.loads(response_content)
        except json.JSONDecodeError as e:
            print(f"JSON parsing error: {e}")
            print(f"Raw response from OpenAI: {response_content}")
            return jsonify({"reply": "тЭМ ржорж╛ржорж╛, рж╕рж╛ржЬрзЗрж╕рзНржЯржЯрж╛ ржмрзБржЭрждрж╛ржЫрж┐ ржирж╛ред ржПржХржЯрзБ ржкрж░рзЗ ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзЗржиред"}), 500

        reply = format_recipe_output(parsed_suggestion_data) 

        return jsonify({"reply": reply})

    except Exception as e:
        print(f"Error calling OpenAI API or formatting response: {e}")
        return jsonify({"reply": "тЭМ ржорж╛ржорж╛, ржХрж┐ржЫрзБ ржЧржгрзНржбржЧрзЛрж▓ рж╣ржЗржЫрзЗ... ржПржХржЯрзБ ржкрж░рзЗ ржЯрзНрж░рж╛ржЗ ржХрж░рзЗржиред"}), 500

if __name__ == '__main__':
    app.run(debug=True, port=5000)